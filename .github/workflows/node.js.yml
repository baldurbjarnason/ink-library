# This workflow will do a clean install of node dependencies, build the source code and run tests across different versions of node
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-nodejs-with-github-actions

# We're reusing and extending the GitHub-provided Node setup action

name: Node.js CI

# This particular workflow should try to build and deploy to dev whenever the main branch updates. But no point in running it on pull requests as it does no testing.
on:
  workflow_dispatch:
  push:
    branches: [ dev ]

jobs:
  build:

    runs-on: ubuntu-latest

# We aren't running automated tests on the front end (yet) as most of the workhorse code is in external unit-tested modules. 
# So, we don't need to run this workflow against multiple versions. Run once. Deploy to dev once.
    strategy:
      matrix:
        node-version: [12.x]

    steps:
    - uses: actions/checkout@v2
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v1
      with:
        node-version: ${{ matrix.node-version }}
    - run: npm ci
  # The --if-present switch means that npm doesn't complain if the script doesn't exist, which should make this workflow easier for us to reuse.
    - run: npm run build --if-present
    - run: npm test
  # This here is an interesting one. The deploy setup below needs an app.yaml configuration file because that's the only way we can properly set up the server env
  # So we need to save the app.yaml as a secret, expose it as an env variable and run a very simple script that saves that env variable as a config file for the deployment step.
  # Make sure that you've saved the right app.yaml file. If you upload the app.yaml for production, the deployed dev site won't have permission to read from and upload to configured Google Storage buckets and everything will break.
    - run: npm run save-config --if-present
      env:
        APP_ENGINE_YAML: ${{ secrets.APP_ENGINE_YAML }}
    - id: deploy
      uses: GoogleCloudPlatform/github-actions/appengine-deploy@master
  # Finally, we need to make sure that the credentials have permission to deploy to that particular project and that the App Engine Admin API is enabled for that project.
  # This is trickier than you'd think as Google's UI (for everything, everywhere, but especially Google Cloud) is confusing garbage.
      with:
        credentials: ${{ secrets.GOOGLE_KEY }}
        project_id: ${{ secrets.PROJECT_ID }}
